// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id             Int            @id @default(autoincrement())
  name           String
  description    String
  price          Float
  salePrice      Float?
  category       String
  sizes          String[]
  collaborateur  String?
  colorVariants  ColorVariant[]
  orderItems     OrderItem[]
  stocks         Stock[]        @relation("ProductStock")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model ColorVariant {
  id        Int            @id @default(autoincrement())
  color     String
  images    ProductImage[]
  product   Product        @relation(fields: [productId], references: [id])
  productId Int
  stocks    Stock[]        @relation("ColorVariantStock")
  orderItems OrderItem[]   @relation("ColorVariantOrderItems")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([productId])
}

model ProductImage {
  id             Int          @id @default(autoincrement())
  url            String   
  isMain         Boolean      @default(false)
  position       String?      // e.g., "front", "back", "side"
  colorVariantId Int
  colorVariant   ColorVariant @relation(fields: [colorVariantId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([colorVariantId])
}

model Order {
  id          Int         @id @default(autoincrement())
  customerName String
  phoneNumber String
  address     String
  totalAmount Float
  status      OrderStatus @default(PENDING)
  items       OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id            Int          @id @default(autoincrement())
  orderId       Int
  productId     Int
  quantity      Int
  size          String?
  color         String?
  price         Float
  order         Order        @relation(fields: [orderId], references: [id])
  product       Product      @relation(fields: [productId], references: [id])
  colorVariant  ColorVariant @relation("ColorVariantOrderItems", fields: [colorVariantId], references: [id])
  colorVariantId Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([orderId])
  @@index([productId])
  @@index([colorVariantId])
}

model Stock {
  id        Int          @id @default(autoincrement())
  location  String       // "monastir", "tunis", "sfax", "online"
  quantity  Int          @default(0)
  product   Product      @relation("ProductStock", fields: [productId], references: [id])
  productId Int
  size      String
  colorId   Int
  color     ColorVariant @relation("ColorVariantStock", fields: [colorId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([productId, location, size, colorId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
